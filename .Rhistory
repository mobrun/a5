df_row = 2
prop = 0
cuml = geog_df$estimate[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
df_row = df_row + 1
cuml = cuml + geog_df$estimate[df_row]
prop = cuml/total
}
# median equals lower end of tier (df_row) plus (total/2 - cuml of bottom tier)/total_in_tier*width_of_tier
median_calc = income_tiers$lower_end[df_row] + ((total/2 - cuml_lag)/geog_df$estimate[df_row])*income_tiers$width[df_row]
return(median_calc)
}
# Chunk 7
acs_data2_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
View(acs_data2_tidy)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidycensus)
library(dplyr)
library(readr)
library(censusapi)
library(tidyr)
# Chunk 3
Sys.setenv(CENSUS_KEY="bf1905599ade12a84a1e2fd8c22103d87b5269f4")
# Chunk 4
vars <- load_variables(2016, "acs5")
vars_of_inst    <- c(paste("B19001_00", 1:9, sep = ""), paste("B19001_0", 10:17, sep = ""))
vars_of_inst_E  <- c(paste("B19001_00", 1:9, "E", sep = ""), paste("B19001_0", 10:17, "E", sep = ""))
income_tiers <- vars %>% filter(name %in% vars_of_inst)
income_tiers$width <- c(0, 10000, rep(5000, 8), 10000, 15000, rep(25000, 3), 50000, 0)
income_tiers$lower_end <- c(0, 0, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 60000, 75000, 100000, 125000, 150000, 200000)
bay_area_fips2 <- c("001","055","085","013","075","095","041","081","097")
# Chunk 5
# Nice, but need to make it tidy
acs_data <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
# Just get the estimates for now
acs_data_tidy <- acs_data %>% subset(select = c("state", "county", "tract", "NAME", vars_of_inst_E)) %>% gather(variable, estimate, -c("state", "county", "tract", "NAME"))
# Chunk 6
median_finder <- function(geog_df, income_tiers_input = income_tiers) {
total <- geog_df$estimate[1]
if (total == 0) {
return(0)
}
df_row = 2
prop = 0
cuml = geog_df$estimate[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
df_row = df_row + 1
cuml = cuml + geog_df$estimate[df_row]
prop = cuml/total
}
# median equals lower end of tier (df_row) plus (total/2 - cuml of bottom tier)/total_in_tier*width_of_tier
median_calc = income_tiers$lower_end[df_row] + ((total/2 - cuml_lag)/geog_df$estimate[df_row])*income_tiers$width[df_row]
return(median_calc)
}
# Chunk 7
acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "county:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = "B19013_001E", region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = "B19013_001E", region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = "B19013_001E", region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = "B19013_001E", region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
vars <- load_variables(2016, "acs5")
library(tidycensus)
library(dplyr)
library(readr)
library(censusapi)
library(tidyr)
Sys.setenv(CENSUS_KEY="bf1905599ade12a84a1e2fd8c22103d87b5269f4")
vars <- load_variables(2016, "acs5")
vars_of_inst    <- c(paste("B19001_00", 1:9, sep = ""), paste("B19001_0", 10:17, sep = ""))
vars_of_inst_E  <- c(paste("B19001_00", 1:9, "E", sep = ""), paste("B19001_0", 10:17, "E", sep = ""))
income_tiers <- vars %>% filter(name %in% vars_of_inst)
income_tiers$width <- c(0, 10000, rep(5000, 8), 10000, 15000, rep(25000, 3), 50000, 0)
income_tiers$lower_end <- c(0, 0, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 60000, 75000, 100000, 125000, 150000, 200000)
bay_area_fips2 <- c("001","055","085","013","075","095","041","081","097")
# Nice, but need to make it tidy
acs_data <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
# Just get the estimates for now
acs_data_tidy <- acs_data %>% subset(select = c("state", "county", "tract", "NAME", vars_of_inst_E)) %>% gather(variable, estimate, -c("state", "county", "tract", "NAME"))
median_finder <- function(geog_df, income_tiers_input = income_tiers) {
total <- geog_df$estimate[1]
if (total == 0) {
return(0)
}
df_row = 2
prop = 0
cuml = geog_df$estimate[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
df_row = df_row + 1
cuml = cuml + geog_df$estimate[df_row]
prop = cuml/total
}
# median equals lower end of tier (df_row) plus (total/2 - cuml of bottom tier)/total_in_tier*width_of_tier
median_calc = income_tiers$lower_end[df_row] + ((total/2 - cuml_lag)/geog_df$estimate[df_row])*income_tiers$width[df_row]
return(median_calc)
}
acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = "B19013_001E", region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(acs_data_counties)
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("Name","B19013_001E"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","B19013_001E"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
acs_data_tracts <- getCensus(name = "acs/acs5", vintage = "2016", vars = c("NAME","B19013_001E"),
region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
View(acs_data_tracts)
names(acs_data_counties)[4] <- "county_estimate"
names(acs_data_tracts)[5] <- "tract_estimate"
ba_estimate <- acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
acs_data_combined <- acs_data_tracts %>% left_join(acs_data_counties) %>% cbind(c("ba_estimate" = ba_estimate))
View(acs_data_combined)
acs_data_combined <- acs_data_tracts %>% left_join(acs_data_counties, by = "county") %>% cbind(c("ba_estimate" = ba_estimate))
acs_data_combined <- acs_data_tracts %>% left_join(subset(acs_data_counties, select = -NAME), by = "county") %>% cbind(c("ba_estimate" = ba_estimate))
acs_data_combined <- acs_data_tracts %>% left_join(subset(acs_data_counties, select = -c(NAME, state)), by = "county") %>% cbind(c("ba_estimate" = ba_estimate))
acs_data_combined <- acs_data_tracts %>% left_join(subset(acs_data_counties, select = -c(NAME, state)), by = "county") %>% cbind(data.frame("ba_estimate" = ba_estimate))
acs_data_combined <- acs_data_tracts %>% subset(select = -state) %>% left_join(subset(acs_data_counties, select = -c(NAME, state)), by = "county") %>% cbind(data.frame("ba_estimate" = ba_estimate))
write_csv(acs_data_combined, "acs_data_combined.csv")
# Nice, but need to make it tidy
acs_data <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
View(acs_data)
View(acs_data_tidy)
?select
View(acs_data_combined)
# tk - add negative number filter
acs_data_combined <- acs_data_combined %>% filter(tract_estimate > 0)
write_csv(acs_data_combined, "acs_data_combined.csv")
View(acs_data_counties)
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","B19013_001E", "B19013_001M"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(acs_data_counties)
ba_estimate <- acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidycensus)
library(dplyr)
library(readr)
library(censusapi)
library(tidyr)
# Chunk 3
Sys.setenv(CENSUS_KEY="bf1905599ade12a84a1e2fd8c22103d87b5269f4")
# Chunk 4
vars <- load_variables(2016, "acs5")
vars_of_inst    <- c(paste("B19001_00", 1:9, sep = ""), paste("B19001_0", 10:17, sep = ""))
vars_of_inst_E  <- c(paste("B19001_00", 1:9, "E", sep = ""), paste("B19001_0", 10:17, "E", sep = ""))
income_tiers <- vars %>% filter(name %in% vars_of_inst)
income_tiers$width <- c(0, 10000, rep(5000, 8), 10000, 15000, rep(25000, 3), 50000, 0)
income_tiers$lower_end <- c(0, 0, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 60000, 75000, 100000, 125000, 150000, 200000)
bay_area_fips2 <- c("001","055","085","013","075","095","041","081","097")
# Chunk 5
# Grabbing the data from the census API.
acs_data <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
# The data returned by the census is in wide format, the line below reshapes it into long or "tidy" format. It makes the median calculation just a tad bit easier.
acs_data_tidy <- acs_data %>% subset(select = c("state", "county", "tract", "NAME", vars_of_inst_E)) %>% gather(variable, estimate, -c("state", "county", "tract", "NAME"))
# Chunk 6
median_finder <- function(geog_df, income_tiers_input = income_tiers) {
total <- geog_df$estimate[1]
if (total == 0) {
return(0)
}
df_row = 2
prop = 0
cuml = geog_df$estimate[df_row]
cum1moe = geog_df$moe[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
df_row = df_row + 1
cuml = cuml + geog_df$estimate[df_row]
prop = cuml/total
}
toemoe =
toestdev = ___ / 1.645
# median equals lower end of tier (df_row) plus (total/2 - cuml of bottom tier)/total_in_tier*width_of_tier
median_calc = income_tiers$lower_end[df_row] + ((total/2 - cuml_lag)/geog_df$estimate[df_row])*income_tiers$width[df_row]
return(median_calc)
}
ba_estimate <- acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
median_finder <- function(geog_df, income_tiers_input = income_tiers) {
total <- geog_df$estimate[1]
if (total == 0) {
return(0)
}
df_row = 2
prop = 0
cuml = geog_df$estimate[df_row]
# cum1moe = geog_df$moe[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
df_row = df_row + 1
cuml = cuml + geog_df$estimate[df_row]
prop = cuml/total
}
#
# toemoe =
# toestdev = ___ / 1.645
#
# median equals lower end of tier (df_row) plus (total/2 - cuml of bottom tier)/total_in_tier*width_of_tier
median_calc = income_tiers$lower_end[df_row] + ((total/2 - cuml_lag)/geog_df$estimate[df_row])*income_tiers$width[df_row]
return(median_calc)
}
acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate))
?runif
runif(1000000)
?rnorm
mean <- [1,2,3,4,5]
mean <- c(1,2,3,4,5])
mean <- c(1,2,3,4,5)
stdev <- c(2,2,2,2,2)
rnarm(100,mean = mean, sd = stdev)
rnorm(100,mean = mean, sd = stdev)
elm
?mapply
mapply(rnorm, n = 100, mean = mean, sd = stdev)
View(acs_data_counties)
View(income_tiers)
View(acs_data)
acs_data_counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(acs_data_counties)
counties <- acs_data_counties %>% subset(select = c("state", "county", "NAME", vars_of_inst_E))
View(counties)
counties <- acs_data_counties %>% subset(select = c(vars_of_inst_E))
vars_of_inst_M  <- c(paste("B19001_00", 1:9, "M", sep = ""), paste("B19001_0", 10:17, "M", sep = ""))
counties_M <- acs_data_counties %>% subset(select = c(vars_of_inst_M))
View(counties_M)
mapply(rnorm, n = 10, mean = counties, sd = counties_M/1.645)
mapply(rnorm, n = 10, mean = counties[,1], sd = counties_M[,1]/1.645)
View(counties)
View(counties)
View(acs_data_counties)
# counties <- acs_data_counties %>% subset(select = c(vars_of_inst_E))
# counties_M <- acs_data_counties %>% subset(select = c(vars_of_inst_M))
counties <- acs_data_counties %>% select(c(B19001_001E, B19001_001M))
library(tidycensus)
library(dplyr)
library(readr)
library(censusapi)
library(tidyr)
median_finder <- function(geog_df, income_tiers_input = income_tiers) {
total <- geog_df$estimate[1]
if (total == 0) {
return(0)
}
df_row = 2
prop = 0
cuml = geog_df$estimate[df_row]
# cum1moe = geog_df$moe[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
df_row = df_row + 1
cuml = cuml + geog_df$estimate[df_row]
prop = cuml/total
}
#
# toemoe =
# toestdev = ___ / 1.645
#
# median equals lower end of tier (df_row) plus (total/2 - cuml of bottom tier)/total_in_tier*width_of_tier
median_calc = income_tiers$lower_end[df_row] + ((total/2 - cuml_lag)/geog_df$estimate[df_row])*income_tiers$width[df_row]
return(median_calc)
}
# counties <- acs_data_counties %>% subset(select = c(vars_of_inst_E))
# counties_M <- acs_data_counties %>% subset(select = c(vars_of_inst_M))
counties <- acs_data_counties %>% select(c(B19001_001E, B19001_001M))
View(counties)
rnorm(1, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645)
mapply(rnorm, n = 1, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645)
mapply(rnorm, n = 2, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645)
?apply
class(mapply(rnorm, n = 2, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645))
(mapply(rnorm, n = 2, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645))
View(acs_data_tidy)
test <- mapply(rnorm, n = 1, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645)
sum(test)
sum(test[1,])
sum(test[1,1])
dim(test)
test <- mapply(rnorm, n = 2, mean = counties$B19001_001E, sd = counties$B19001_001M/1.645)
dim9test
dim(test)
sum(test[1,])
median_finder2 <- function(sim_row, income_tiers_input = income_tiers) {
# total <- geog_df$estimate[1]
total <- sum(sim_row)
if (total == 0) {
return(0)
}
# df_row = 2
bracket = 1
prop = 0
cuml = sim_row[bracket]
# cum1moe = geog_df$moe[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
bracket = bracket + 1
cuml = cuml + sim_row[bracket]
prop = cuml/total
}
median_calc = income_tiers$lower_end[bracket] + ((total/2 - cuml_lag)/sim_row[bracket])*income_tiers$width[bracket]
return(median_calc)
}
test[1,]
median_finder2(sim_row = test[1,])
ba_estimate <- acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)) %>% median_finder()
ba_estimate
median_finder2 <- function(sim_row, income_tiers_input = income_tiers) {
# total <- geog_df$estimate[1]
total <- sum(sim_row)
if (total == 0) {
return(0)
}
# df_row = 2
bracket = 1
prop = 0
cuml = sim_row[bracket]
# cum1moe = geog_df$moe[df_row]
prop = cuml/total
while (prop < 0.5) {
cuml_lag = cuml
bracket = bracket + 1
cuml = cuml + sim_row[bracket]
prop = cuml/total
}
median_calc = income_tiers$lower_end[(bracket + 1)] + ((total/2 - cuml_lag)/sim_row[bracket])*income_tiers$width[(bracket + 1)]
return(median_calc)
}
median_finder2(test[1,])
View(acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate)))
sum(c(2,3))
sum(c(2,3)^2)
View(counties_M)
MOE <- function(var_col) {
return(sqrt(sum(var_col^2)))
}
MOE(counties_M$B19001_001M)
sqrt(sum(counties_M$B19001_001M^2))
apply(counties_M, 2, MOE)
class(apply(counties_M, 2, MOE))
margins <- apply(counties_M, 2, MOE)
margins[1]
MOE(counties_M$B19001_001M)
margins <- data.frame("variable" = names(margins), "moe" = margins)
View(margins)
seed_data <- cbind(seed_data, margins)
seed_data <- acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate))
seed_data <- cbind(seed_data, margins)
View(seed_data)
seed_data <- acs_data_tidy %>% group_by(variable) %>% summarise("estimate" = sum(estimate))
MOE(counties_M$B19001_001M)
margins <- apply(counties_M, 2, MOE)
margins <- data.frame("variable_moe" = names(margins), "moe" = margins)
seed_data <- cbind(seed_data, margins)
mapply(rnorm, n = 1, mean = seed_data$estimate, sd = seed_data$moe/1.645)
getwd(0)
getwd()
setwd("C:/Users/Derek/Documents/GitHub/a5-prep")
list.files()
list.files
list.files()
dir.create("test")
file.remove("test")
knitr::opts_chunk$set(echo = TRUE)
library(censusapi)
Sys.setenv(CENSUS_KEY="bf1905599ade12a84a1e2fd8c22103d87b5269f4")
rm(list = ls())
test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
View(test)
rm(test)
# test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(test)
View(test)
"A":"I"
A:I
paste(letters[1:9], sep = "")
paste(letters[1:9])
letters[1:9]
LETTERS[1:9]
# test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001E)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(test)
# test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(test)
listCensusMetadata(name = "acs/acs5", type = "variables")
listCensusMetadata(name = "acs/acs5", type = "variables")
# test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
listCensusMetadata(name = "timeseries/healthins/sahie",
type = "variables")
listCensusMetadata(name = "acs5", type = "variables")
listCensusMetadata(name = "acs", type = "variables")
?listCensusMetadata
listCensusMetadata(name = "acs/acs5", vintage = 2016, type = "variables")
?list
library(dplyr)
library(ggplot2)
rm(test)
# test <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME", "group(B19001)"), region = "tract:*", regionin = "state:06+county:001,013,041,055,075,081,085,095,097")
counties <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(counties)
View(select(c("state","county", "NAME")))
View(select(counties,c("state","county", "NAME")))
vars_of_inst_E  <- c(paste("B19001_00", 1:9, "E", sep = ""), paste("B19001_0", 10:17, "E", sep = ""))
bay_area <- select(counties,c("state","county", "NAME", vars_of_inst_E))
View(bay_area)
library(tidyr)
?gather
bay_area <- select(counties,c("state","county", "NAME", vars_of_inst_E)) %>% gather(var, value, -c("state","county", "NAME"))
bay_area <- select(counties,c("state","county", "NAME", vars_of_inst_E)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate" = sum(variable))
bay_area <- select(counties,c("state","county", "NAME", vars_of_inst_E)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate" = sum(value))
groups <- vector("list", 9)
counties_w <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME","group(B19001A)"), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(counties_w)
i = 1
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
var_name
counties_w <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
View(counties_w)
var_name
View(groups)
View(counties_w)
paste("B19001",LETTERS[i])
paste("B19001",LETTERS[i], sep = "")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_inst <- c(paste(group_name,"_00", 1:9, sep = ""), paste(group_name,"_0", 10:17, sep = ""))
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, sep = ""), paste(group_name,"_0", 10:17, sep = ""))
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
counties_race <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, sep = ""), paste(group_name,"_0", 10:17, sep = ""))
temp <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value))
View(counties_race)
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, "E", sep = ""), paste(group_name,"_0", 10:17, "E", sep = ""))
temp <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value))
View(counties_race)
View(temp)
?do.call
for (i in 1:9) {
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
counties_race <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, "E", sep = ""), paste(group_name,"_0", 10:17, "E", sep = ""))
groups[[i]] <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value))
}
View(groups[[2]])
View(select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value)))
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value))[,2]
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value))
class(select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize("estimate_total" = sum(value)))
View(temp)
groups <- vector("list", 9)
# var_groups <- c()
for (i in 1:9) {
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
counties_race <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, "E", sep = ""), paste(group_name,"_0", 10:17, "E", sep = ""))
groups[[i]] <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate",LETTERS[i], sep = "_")= sum(value))
}
groups <- vector("list", 9)
# var_groups <- c()
for (i in 1:9) {
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
counties_race <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, "E", sep = ""), paste(group_name,"_0", 10:17, "E", sep = ""))
groups[[i]] <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate",LETTERS[i], sep = "_")= sum(value))
}
groups <- vector("list", 9)
# var_groups <- c()
for (i in 1:9) {
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
counties_race <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, "E", sep = ""), paste(group_name,"_0", 10:17, "E", sep = ""))
groups[[i]] <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate",LETTERS[i], sep = "_") = sum(value))
}
paste("estimate",LETTERS[i], sep = "_")
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate",LETTERS[i], sep = "_") = sum(value))
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable)
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate", LETTERS[i], sep = "_") = sum(value))
var_name <- paste("estimate", LETTERS[i], sep = "_")
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(var_name = sum(value))
var_name
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate", LETTERS[i], sep = "_") = sum(value))
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarize(paste("estimate", LETTERS[i], sep = "") = sum(value))
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarise(paste("estimate", LETTERS[i], sep = "") = sum(value))
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarise("estimate" = sum(value))
select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarise("estimate" = sum(value)) %>% select(estimate)
groups <- vector("list", 9)
# var_groups <- c()
for (i in 1:9) {
var_name <- paste("group(B19001",LETTERS[i],")", sep = "")
counties_race <- getCensus(name = "acs/acs5", vintage = 2016, vars = c("NAME",var_name), region = "county:001,013,041,055,075,081,085,095,097", regionin = "state:06")
group_name <- paste("B19001",LETTERS[i], sep = "")
vars_of_int_loop <- c(paste(group_name,"_00", 1:9, "E", sep = ""), paste(group_name,"_0", 10:17, "E", sep = ""))
# var_name <- paste("estimate", LETTERS[i], sep = "_")
groups[[i]] <- select(counties_race,c("state","county", "NAME", vars_of_int_loop)) %>% gather(variable, value, -c("state","county", "NAME")) %>% group_by(variable) %>% summarise("estimate" = sum(value)) %>% select(estimate)
}
View(groups)
View(do.call(cbind, groups))
apply(do.call(cbind, groups), sum, MARGIN = 1)
apply(do.call(cbind, groups), sum, MARGIN = 2)
